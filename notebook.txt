target = 11
arr[] = 7, 5, 12, 10
m[11][4] = new int [11][4]

targetSum(int arr[], sum, i){

if(sum==0)
return true;

if(i>=arr.length)
return false;

if(m[sum][i]!=-1)
return m[sum][i];

if(sum<arr[i])
return targetSum(arr, sum, i+1);


m[sum][i]= targetSum(arr, sum-arr[i], i+1) || targetSum(arr, sum, i+1);
return m[sum][i];
}


countTargetSum(){

if(sum==0)
return 1;

if(sum<arr[i])
return countTargetSum(arr, sum, i+1);

if(i>=arr.length)
return 0;

return countTargetSum(arr, sum-arr[i], i+1) + countTargetSum(arr, sum, i+1)

}



target = 11
arr[] = 7, 5, 12, 10

targetSumUn(int arr[], int sum, int i){
if(sum==0)
return true;

if(sum<arr[i])
return targetSumUn(arr,sum,i+1);

if(i>=arr.len)
return 0;


return targetSumUn(arr,sum-arr[i],i) || targetSumUn(arr,sum,i);

}



0, 1, 1, 2, 3, 5, 8

n=2
op=1

n=6
op=5


x=0
y=1
sum=x+y
sum=1




sum=x+y;
x=y;
y=sum;


x=3
y=5
sum=8



sum=sum+fib(x+y)

n=5
 fib(4)=1+1=>2
    fib(3)=1+0=>1
       fib(2)=>1
          fib(1)=>1		
       fib(0)=>0
    fib(1)=>1
 fib(2)=>1

		
int m[5]

fib(int n){

if(n<=1){
m[n]=n;
return m[n];
}

m[n]=fib(n-1)+fib(n-2);
return m[n];

}



1->2->3->4->5

Node newHead;

reverse(Node pre, Node n){

if(n.next==null){
newHead=n;
return;
}
reverse(n, n.next);

n.next.next=pre; 
pre=null;

}

x(1,2)------------------> 5->4->3->2->1->null
  x(2,3)------------------> 5->4->3->2->null
    x(3,4)------------------> 5->4->3->null
      x(4,5)





Node newHead=null;
Node reverse(Node pre, Node head) {
    // Base case: empty list or single node
    if (head == null) {
        newHead = pre;
    }
    // 1. Reverse the rest of the list
    reverse(head, head.next);
    // 2. Put `head` at the end of that reversed list
    head.next.next = head;
    head.next = null;
}







queen can hit 

Row\Col  1  2  3  4
      ──────────────
  1   | .  Q  .  .    ← queen at (1,2)
  2   | .  .  .  Q    ← queen at (2,4)
  3   | Q  .  .  .    ← queen at (3,1)
  4   | .  .  Q  .    ← queen at (4,3)

m[n][n]

nQueen(int i, int j){

if(i>n || j>n)
return;

m[i][j]=1;
if(isInVailid(i,j)){
   nQueen(i+1,j);
   m[i][j]=0;
   nQueen(i,j+1);
 }

}

boolean isVailid(int i, int j){

//check same column
//check same row
//check same diagonal

}




// Entry‐point: start at column 0, row 0
public static void solve(char[][] board, List<List<String>> allBoards) {
    solve(board, allBoards, 0, 0);
}

// Recursive exploration over (col, row) instead of for‐loops
private static void solve(char[][] board,
                          List<List<String>> allBoards,
                          int col,
                          int row) {
    int n = board.length;

    // 1) Placed all queens?
    if (col == n) {
        saveBoard(board, allBoards);
        return;
    }
    // 2) Exhausted rows in this column?
    if (row == n) {
        return;
    }

    // 3) Try placing at (row, col)
    if (isSafe(col, row, board)) {
        board[row][col] = 'Q';
        solve(board, allBoards, col + 1, 0);
        board[row][col] = '.';
    }

    // 4) Try next row in the same column
    solve(board, allBoards, col, row + 1);
}

// Now takes (col, row, board) to match the solve(...) ordering
private static boolean isSafe(int col, int row, char[][] board) {
    int n = board.length;

    // a) No other queen to the left in the same row
    for (int c = 0; c < col; c++) {
        if (board[row][c] == 'Q') return false;
    }
    // b) No queen on the upper‐left diagonal
    for (int r = row - 1, c = col - 1; r >= 0 && c >= 0; r--, c--) {
        if (board[r][c] == 'Q') return false;
    }
    // c) No queen on the lower‐left diagonal
    for (int r = row + 1, c = col - 1; r < n && c >= 0; r++, c--) {
        if (board[r][c] == 'Q') return false;
    }
    return true;
}





// Recursive exploration over (col, row) instead of for‐loops
private static void solve(char[][] board,
                          List<List<String>> allBoards,
                          int col,
                          int row) {
    int n = board.length;

    // 1) Placed all queens?
    if (col == n) {
        saveBoard(board, allBoards);
        return;
    }
    // 2) Exhausted rows in this column?
    if (row == n) {
        return;
    }

    // 3) Try placing at (row, col)
    if (isSafe(col, row, board)) {
        board[row][col] = 'Q';
        solve(board, allBoards, col + 1, 0);
        board[row][col] = '.';
    }

    // 4) Try next row in the same column
    solve(board, allBoards, col, row + 1);
}


M=
Row\Col  0  1  2  3
      ──────────────
  0   | Q  .  .  .    ← queen at (1,2)
  1   | .  .  Q  .    ← queen at (2,4)
  2   | .  .  .  .    ← queen at (3,1)
  3   | .  .  .  .    ← queen at (4,3)


solve(0,0)
      [isSafe(0,0) true]
       solve(1,0)
           [isSafe(1,0) false]
           -solve(1,1)
                 [isSafe(1,1) false]
                -solve(1,2)
                      [isSafe(1,2) false]
                     -solve(1,2)


a = [
  [1, 0, 0],
  [1, 1, 0],
  [0, 1, 1],
]


rat in a maze 

x(int i,int j){

if(i==n-1 && j==n-1)
return true;

return x(i+1,j) || x(i,j+1);

}

x(0,0)
  x(1,0)
    x(2,0) 
     [F]
    x(1,1)
     [T]
      x(2,1)  


x(int i,int j, int ans[][]){

if(i>n || j>n || maze[i][j]==0){
ans[i][j]=0;
return;
}

if(i==n-1 && j==n-1){
print ans; //ans contains path 
ans[i][j]=0;
}

ans[i][j]=1
x(i+1,j,ans); 
x(i,j+1,update(ans,i,j));

}


update(int ans[][], int i ,int j){
ans[i][j]=1;
return ans;
}



Example 1:
board = [
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED"
→ true  // Path: A→B→C→C→E→D

Example 2:
same board
word = "SEE"
→ true  // Path: S→E→E

Example 3:
same board
word = "ABCB"
→ false // You would have to reuse the first 'B'


x(int i, int j, string str){ 

if(i>n || j>m || m[i][j]==1 || board[i][j] != )
return false;

str=str+board[i][j]
m[i][j]=1

if(str.equals())
return true;


boolean ans = x(i+1,j,str)||
	      x(x,j+1,str)||
              x(x-1,j,str)||
              x(x,j-1,str);

str=str(0,str.len-1); //remove last character
m[i][j]=0;

return boolean;

}

x(0,0)
      f, str='A', f
      x(1,0)
	    f, str='AB', f












x(String str, int i){

if(i>n)
return;

while(i<n){

str=str.charAt(i);
x(str,i++);
str=str - charAt(i); //remove last added char
}
}



Input:  nums = [2, 7, 9, 3, 1]


9+1=10
7+3=10





max(x(a[i],x(a[i+1))






	[i=0,a[0]=2]
	x(0)
	  [i=2,a[2]=9]
  	  x(2)<-- 1
	    [i=4,a[4]=1]
 	    x(4)<-- 0
 	      [i=5],[i>n]
	       return 0;  	       
	    x(5)<-- 0 
 	      [i=5],[i>n]
	       return 0;  	       
  	  x(3)<-- 0
	    [i=5,a[4]=1]
 	    x(5)<-- 0
 	      [i=5],[i>n]
	       return 0;  	       
	    x(5)<-- 0 
 	      [i=6],[i>n]
	       return 0;  	       

if(i>n)
return 0;

max(x(a[i+2],i+2),x(a[i+3],i+3))

max(x(4,i+1),x(5,i+2))
return 

max(x(a[4]),x(a[5]))
1,0

1



sum=sum+num;

1,0



    private static int robRec(int[] nums, int i, int currentSum) {

        if (i >= nums.length) {
            return currentSum;
        }

        int rob = robRec(nums, i + 2, currentSum + nums[i]);
        int skip = robRec(nums, i + 1, currentSum);
        return Math.max(rob, skip);
    }

Input:  nums = [2, 7, 9, 3, 1]


robRec(0)
       robRec(2) [i=0,0+2, cs=0]
              robRec(4) [i=2,2+2, cs=1] <-- 1
                     robRec(6) [i=4,4+2, cs=0] // <-- 1
                     robRec(5) [i=4,4+1, cs=0] // <-- 1
                     = return max(1,1)

              robRec(3) [i=2,2+1, cs=0] <-- 1
                     robRec(5) [i=3,3+2,cs=0] // <-- 1
                     robRec(4) [i=3,3+1,1+cs=0] // <-- 1
                            robRec(6) [i=4,4+2, cs=0] // <-- 1
                            robRec(5) [i=4,4+2, cs=0] // <-- 1
                            = return max(1,1)
       





Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4



Class Node{

int val;
Node pre;
Node next;

Node(int val, Node pre, Node next){
this.val=val;
this.pre=pre;
this.next=next;
}

}

class LRUCache{
int C=2 //capacity


Map<Integer,Node> hm
Node head,last=null;


put(int key,int val){

Node n=new Node();

if(head==null){
head=n;
last=n;
return;
}

//1. if size of map is more than 'C', remove the first node
if(m.size()>=C)
head=head.next;

//2. add node at last 
last.next=n;
last=last.next;
hm.put(key,n);

}

int get(int key){

if(!m.containsKey(key))
return -1;

//1. get node address from Map and return the value (m.get(key))
Node add=m.get(key);


//2. add this node at last of list
last.next=add;
add.next=add.next;
add.next.pre=add.pre;
add.next=null;
}


}



Input:  prices = [7, 1, 5, 3, 6, 4]
Output: 5


7, 1, 5, 3, 6, 4
7, 6, 6, 6, 0, 0





egg=3
floor=5
o/p=3


5
4
3
2
1


x(1,3)
  x(2,3)
    x(3,3)<-- 0 [3-0=3]  
      x(4,3)<-- 2
        x(5,3) <-- 3
        x(5,2) <-- 2         
        return min(3,2) => return min 2  [3-2=1]
      x(4,2)<-- 1
        x(5,2) <-- 2
        x(5,1) <-- 1
	  return min(2,1) => return 1  [3-1=2]
      return min(2,1) => return min 1
    x(3,2)<-- 0
      x(4,2)<-- 1
        x(5,2) <-- 2
        x(5,1) <-- 1         
        return min(2,1) => return min 1
      x(4,1)<-- 0
        x(5,1) <-- 1
        x(5,0) <-- 0         
        return min(1,0) => return min 0
    return min(1,0) => return min 0
  x(2,2)
    x(3,2)<-- 0 [3-0=3]  
      x(4,2)<-- 2
        x(5,2) <-- 2
        x(5,1) <-- 1         
        return min(2,1) => return min 1  [3-1=2]
      x(4,1)<-- 1
        x(4,1) <-- 2
        x(4,0) <-- 1
	  return min(2,1) => return 1  [3-1=2]
      return min(2,1) => return min 1
    x(3,1)<-- 0
      x(4,1)<-- 1
        x(4,1) <-- 1
        x(4,0) <-- 0         
        return min(1,0) => return min 0
      x(4,0)<-- 0
        x(4,0) <-- 0
        x(4,-1) <-- 0         
        return min(1,0) => return min 0
    return min(0,0) => return min 0
x(1,2)


x(int f, int e){

if(e<=0){
return 0;
}

if(f==n){
return e;
}


return Math.min(x(f+1,e),(x(f+1,e-1));

}


Minimum Jump required

Input:
5
2 3 1 1 4

Output:
2

call(int j,int i){

if(i==n-1)
return j


return Math.min(call(j+a[i],i+a[i]));


}

j=j+a[i]


x(0)
  x(1)
    x(2)
      x(3)
        x(4)



       3
      / \
     9  20
        / \
       15  7


Boolean isHbt=true;



hbt(Node n){
if(n==null)
return 0;

int lb=hbt(n.left);
int rb=hbt(n.right);

int height = 1+Math.max(lb,rb);
isHbt=isHbt&&!(lb-rb>1);

return height;

}


isHbt=T

x(3)
  x(20)
    x(7)<-- 1
      x(null)<-- 0
      x(null)<-- 0
      return 1+(0,0) //base return 0
    x(15)<-- 1
      x(null)<-- 0
      x(null)<-- 0
      return 1+(0,0) //base return 0
    return 1+(1,1)



       100
      / \
     90  120
        / \
       80  125


isBst(Node p, Node n){

if(n==null)
return true;

if(n.left!=null && !((n.left.val<n.val)&&(n.left.val<p.val)))
return false

if(n.right!=null && (n.right.val>n.val))
retrun false

return isBst(n,n.left) && isBst(n,n.right);

}


x(100) [90<100, 120>90]
  x(90) [skip,skip] <-- true
    x(null) //base 
    x(null) //base 
    return true;
  x(120) 




Input:
ABC

Output:
ABC
ACB
BAC
BCA
CAB
CBA


ABCD
ABDC
ACBD
ACDB
ADBC
ADCB
BACD
BADC
BCAD
BCDA
BDAC
BDCA
CABD
CADB





x(int i, string str){

if(i>=str.length())
print str

x(j=i,j<len;){
str=str+str.subString(j,n-j)
x(j++,str)

}

}


x(0,A)
  x(1,AB)
    x(2,ABC)
      x(3,ABCD)




private static void x(int remaining, List<Integer> path) {
        if (remaining == 0) {
            System.out.println(path);
            return;
        }

        for (int step = 1; step <= 3; step++) {
            if (step <= remaining) {
                path.add(step);
                x(remaining - step, path);
                path.remove(path.size() - 1);
            }
        }
    }


x(3,[])
  [s=1] 1<=3
  x(2,[1,1])	
    [s=1] 1<=2
    x(1,[1,1,1])	
      [s=1] 1<=1
      x(0,[1])	
      --> [1,1,1]
    x(1,[1,1,1])	



Input:
4

Output:
[
 [".Q..",
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",
  "Q...",
  "...Q",
  ".Q.."]
]


 ["1...",
  "....",
  "....",
  "...."]


0,1

x(0,0)
  for()
  1,0 F
  2,0 F
  3,0 F
x(1,0)
  for()
  1,1
  2,1
  3,1
	




x(int i,int j){

if(j==n && i==n)
{
return ;
}

for(int i=0;i<n;i++){
m[i][j]=1;
isValid(i,j+1)
x(i,j+1)
m[i][j]=0;
}

}



isValid(int i,int j){
}









Print all paths

nxn


0 1 0 
0 1 1
1 1 1

allowed
i+1
j+1


x(int i, int j, List<Integer> l){

  if(j>n || i>n)
   return;
  if(i==n && j==n)
   print l

 
  m[i][j]=1;
  isValid(i,j,l);
  x(i,j+1,l);
  m[i][j]=0;

  x(i+1,j,l);

}



(0,0) []
  0,0 f
  0,1 t [0,1]
 (0,2)
   0,2 f
  (1,2)
    1,2 t
    (1,3)
     1,3 --base
    (2,2)


x(i+1,j)
x(i,j+1)








[1,1,1]    [2,2,2]
[1,1,0] => [2,2,0] 
[1,0,1]    [2,0,1]

 sr = 1, sc = 1, color = 2

x(int r,int c){

if(a[r][c]==0)
return

if(a[r][c]==1)
a[r][c]==2

x(r+1,c)
x(r,c+1)
x(r-1,c)
x(r,c-1)

}














Input: grid = 
[2,1,1]
[1,1,0]
[0,1,1]

Output: 4


x(int r,int c){

if(r<0 || r>m || c<0 || c>n)
return;


x(r+1,c)
x(r,c-1)
x(r-1,c)
x(r,c-1)


}


        0 1 2 3 4
arr[] = 2,3,7,8,10
sum = 11
op = T


x(int arr[], int sum, int i){

if(i>n || arr[i]>sum)
return

if(sum==0)
return true;


boolean l = (arr, sum-arr[i], i+1)
boolean r = (arr, sum, i+1);

return r||l;

}


(11,0) 
    (9,1) 11-2=9 I
       (6,2) 9-3=6 I 
       //base return 6<7
       (9,2) E
          (2,3) 9-7=2 I
          //base return 2<8
          (9,3) E  
	  







max = 6
                -2 1 -2 4  3 5 6 -1 4

Input:  nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation:  The contiguous subarray [4,-1,2,1] has the largest sum = 6.


[-2]
[1]
-2,1


[-2,1,-3]

-2
1
-2,1


max=0
a[0]=-1
max=0
a[1]=1
max=1
a[2]=-3
max=-2

for(int i=0;i<n;i++){
if(a[i]>max)
max=a[i]
else
max+=a[i]
}



A = "abcde"
B = "ace"
Output: 3
Explanation: The longest common subsequence is "ace".



A = "abcdef"
B = "acf"
Output: 3
Explanation: The longest common subsequence is "acf".


A = "abcde"
B = "acf"
Output: 2
Explanation: The longest common subsequence is "ac".




A = "abc"
B = "ac"




if(a[i]==b[j]){
i++;
j++;
count++;
}else{
j++;
}


A = "abcde"
B = "acf"


x(string s1, string s2, int i, int j){

if(i>s1.length || j>s2.length)
return;

if(a[i]==b[j])
x(s1,s2,i++,j++); count++;
else
x(s1,s2,i,j++);

}


A = "abcde"
B = "acf"

a==a
x(1,1)
  x(1,2) b=c
    x(1,3) c=c
      x(2,4) c=c


Input: 3
Output: 3

Explanation of possible sequences:
  1) 1 + 1 + 1
  2) 1 + 2
  3) 2 + 1


Input: 2
Output: 2


1) 1+1
2) 2



x(int s){

if(s<0)
return 0;

if(s==0)
return 1;

int one=x(s-1);
int two=x(s-2);

return one+two;

}


x(2)
  x(1) <-- 1
    x(0)
    //base 
  x(0)
    //base


Problem: A frog is crossing a river by jumping on stones in a line. From stone i with last-jump k, it may jump either k-1, k, or k+1 units to the next stone. Determine if the frog can reach the last stone.

Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: 1→2→2→3→4→5 jumps respectively.




Input:
obstacleGrid = [
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2

Explanation:
The obstacle at (1,1) blocks the middle. The two valid paths are:
1) Right → Right → Down → Down
2) Down → Down → Right → Right


x(int r, int c, int g[][]){

if(r<0 || c<0 || r>=n || c>=m || g[r][c]==1)
return 0;

if(r==n-1 && c==n-1)
return 1;

return x(r+1,c,g) + x(r,c+1, g);

}

[0,1]
[0,0]

x(0,0)
  x(1,0)<-- 0
    x(2,0)
    //base
  x(0,1)<-- 1
    x(1,1)




Generalized Climbing Stairs (no LC link)
Problem: Given n and a set of allowed steps steps = {s1,s2,…,sk}, count how many distinct ways to climb to n.

Input: n = 5, steps = {1,3,5}
Output: 5
Explanation (ways): 
  1+1+1+1+1, 1+1+3, 1+3+1, 3+1+1, 5

x(int n, int i, int a[]){

if(n==0)
return 1;

if(i>=n | n<0)
return 0;

return x(n-a[i],i,a) + x(n-a[i+1],i+1,a)

}



x(5,0)
  x(4,0)
    x(3,0)
      x(2,0)
        x(1,0)<--1
          x(0,0)
        x(-1,1)<--0
      x(1,0)
 


Input:  nums = [2, 0, 2, 1, 1, 0]
Output: [0, 0, 1, 1, 2, 2]

1st: 
count i,j and k=(n-(i+j))
update array

2nd:
i,j,k
i=0
j=0
k=n.length

while(j<n.len || k==j){

if(a[j]==0){
temp=a[j];
a[j]=a[i]
a[i]=a[j]
i++;
}

if(a[j]==2){
temp=a[j];
a[j]=a[k]
a[k]=a[j]
k--;
}

j++;

}


[0, 1, 2, 3, 4, 5]
[2, 0, 2, 1, 1, 0]

i=0 (non 0)
j=0
k=5 (non 2)

[0, 0, 2, 1, 1, 2]
i=0 
j=1
k=4 

[0, 1, 2, 3, 4, 5]
[0, 0, 2, 1, 1, 2]
i=0 
j=1
k=4 





[0, 1, 2, 3, 4, 5]
[0, 0, 2, 1, 1, 2]
i=1 (non 0)
j=0
k=4 (non 2)



Input:  nums = [0, 1, 0, 3, 12]
Output: [1, 3, 12, 0, 0]



Input:  nums = [1, 0, 2, 0, 0, 3]
Output: [1, 2, 3, 0, 0, 0]


1,3,4,9,0,0,0
1,0,3,12,0
1, 2, 2, 3, 3, 3]

[1, 1, 2, 2, 2, 3]
[1, 2, 2, 2, 3, 3]

[1, 0, 2, 0, 3, 0]
[1, 0, 2, 3, 3, 0]
[1, 0, 2, 3, 0, 0]



[1, 2, 3, 0, 0, 0]
[1, 0, 0, 3, 12]

[1, 2, 0, 0, 0, 3]


[1, 3, 12, 0, 0]



Input:  nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
Output: 5, nums = [0, 1, 2, 3, 4, _, _, _, _, _]
Explanation: Your function should return length = 5,
with the first five elements of nums being 0, 1, 2, 3, and 4.




Input: rec1 = [0, 2, 3, 0],   // top-left (0,2), bottom-right (3,0)
       rec2 = [1, 3, 4, 1]    // top-left (1,3), bottom-right (4,1)
Output: true

Explanation: They share a positive-area region from x∈[1,3], y∈[1,2].


y

    1,3
    
 0,2

    	         4,1
        3,0          
			x




Input:
n = 3
costs = [
  [17, 2, 17],
  [16,16, 5],
  [14, 3,19]
]
Output: 10


00,01,02
10,11,12
20,21,22

x(int sum,int p,int q, int i, int j){

if(p==j+1 && q==i)
return = 0;

if(j==n-1)
ans=min(ans,sum);

for(int i=0;i<3;i++){
sum=sum+a[j][i]
x(sum,i,j,j+1,i)
sum=a[j][i]-sum;
}

}




p=0,q=0,j=0,i=0
sum=0+17=17
17,p=0,q=0,j=1,i=0
sum=17+
p=0,q=1,j=2,i=0




[3, 1, 5, 8]


1=>(3*1*5)=>15
3=>(1*3*1)=>3
3,1=>(3*15)
1,3=>(15*15)

1,5

3,1,5
5,3,1
1,3,5
5,1,3
3,5,1
1,5,3

3,1,5,8
8,3,1,5


1

12
21

312
123
132
231






coins []  =  { 6, 9, 1, 2, 16, 8}

trial 1: (players will pick the best option available for them)
coins [] = { 6, 9, 1, 2, 16, 8} , Alice picks 8
coins [] = { 6, 9, 1, 2, 16}, Bob picks 16
coins [] = { 6, 9, 1, 2}, Alice picks 6
coins [] = { 9, 1, 2}, Bob picks 9
coins [] = {1, 2}, Alice picks 2
coins [] = {1}, Bob picks 1
Alice: 8+6+2 =16 Bob: 16+9+1=26 => Alice Lost

So clearly picking up the best in each move is not good for Alice. What else Alice can do to win the game.

trial 2: (Alice thinks about Bob's move, Will discuss the strategy in solution) 
coins [] = { 6, 9, 1, 2, 16, 8} , Alice picks 6
coins [] = { 9, 1, 2, 16, 8}, Bob picks 9
coins [] = { 1, 2, 16, 8}, Alice picks 1
coins [] = 2, 16, 8}, Bob picks 8
coins [] = {2, 16}, Alice picks 16
coins [] = {2}, Bob picks 2
Alice: 6+1+16 =23 Bob: 9+8+2=19 => Alice Won


N = 3  
V = [2, 4, 8]  
10  


2,4,8

8 {2,4}
   4 {2}
     2 {}

2 {4,8}
   4 {8}
     8 {}




{ 6, 9, 1, 2, 16, 8} i=5

	8 { 6, 9, 1, 2, 16 } i=4
		16 { 6, 9, 1, 2 } i=3
			2 { 6, 9, 1 } i=2 <--9
				1 { 6, 9 } i=1 <-- 9
					9 { 6 } i=0 <-- 6
						6 { }
						//base
		
					6 { 9 } <-- 9
						9 { } 
						//base
				6 { 9, 1 } <-- 9
					1 { 9 } <-- 9
						9 { }
						//base
		
					9 { 1 } <-- 1
						1 { } 
						//base
			6 { 9, 1, 2 } <-- 9
				2 { 9, 1 } <-- 9
				9 { 1, 2 } <-- 2
					1 { 2 } <-- 2
						2 { }
						//base
		
					2 { 1 } <-- 1
						1 { } 
						//base


		6 { 9, 1, 2, 16 }


	6 { 9, 1, 2, 16, 8}




x(){

if(j==n-1 || i==0)
return a[i];


r=a[i]+x(a,i-1,n);
l=a[j]+x(a,j+1,n);
return Math.max(l,r);


}

n=1
1
n=2
1,1
2




n=2
1,1
2

n=4

x(int x){

if(n==1)
return 1;

if(n==2)
return 2;


return x(n-1)+x(n-2));
}


x(4) <-- 5
  x(3) <-- 3
    x(2) <-- 2		//base 
    x(1) <-- 1		//base 
  x(2) <-- 2




4,6,2,3,8,4,6
4+6+8=18
2+3+8=13
2+3+6=11
2+3+4+6=15

18          14           15       13         0     10   6	
4,          6,           2,       3,         8,    4,   6




x(int i,int prev, int sum){

if(i==n-1)


if(a[i]>a[prev])
sum+=a[i];

	x(i+1,i,sum)

}







2,3,7,8,10
sum=11



2,3,7,8,10 (2)
      7,8,10 (5)
          8,10 (12)




3,7,8,10 (3)




2,3,7,8 
    3,7,8 (2) I2
        7,8 (5) I3 
            8 (12) I7 //base 
            8 (5) E7 <-- false
                (13) I8 //base 
                (5) E8 //base false
 
        7,8 (2) E3 

    3,7,8 (0) E2
        7,8 (3) I3 
            8 (10) I10 
        7,8 (3) I3 



x(int sum, int[] a, int i){

if(sum==ans)
return true;

if(i>n)
return false;

if(a[i]+sum>ans)
return x(sum,i+1);

return x(sum+a[i],i+1) || x(sum,i+1);

}



   	static boolean isSubsetSumRec(int[] arr, int n, int sum) {
      
        // Base Cases
        if (sum == 0) {
            return true;
        }
        if (n == 0) {
            return false;
        }

        // If last element is greater than 
      	// sum, ignore it
        if (arr[n - 1] > sum) {
            return isSubsetSumRec(arr, n - 1, sum);
        }

        // Check if sum can be obtained by including 
      	// or excluding the last element
        return isSubsetSumRec(arr, n - 1, sum) || 
               isSubsetSumRec(arr, n - 1, sum - arr[n - 1]);
    }









-1,0,3

l=0
r=2
mid=2/2=1

1<0 f
0==3 f
0>3f
0<3t
l=1+1=>2
mid=2+1/2=2


public int bst(int l, int mid, int r, int nums[] ){

if(r<l)
return -1;

if(nums[mid]==target)
return mid;

if(nums[mid]>target){
r=mid-1;
mid=(l+r)/2;
}

if(nums[mid]<target){
l=mid+1;
mid=(l+r/)2;
}

return bst(l,mid,r,nums);

}



seats = [3,1,5], students = [2,7,4]
1,3,5
2,4,7
1,1,2

seats = [4,1,5,9], students = [1,3,2,6]
1-1=0
4-2=2
5-3=2
9-6=3

seats = [2,2,6,6], students = [1,3,2,6]
2-1=1
2-2=0
6-3=3
6-6=0


2932


293
  293 2/93
    293 29/3
      293 293/0 //base

    293 23/9


    293 9/23
      293 3/29
  293 9/23
  293 3/29




5*10=>50
3*9=>27
2*7=>14

91


Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.






[2,3,1,1,4]

x(2) j=1, i=0
  x(3) j=1, i=1 
    x(1) j=1, i=2
      x(1) j=1, i=3
        x(4) j=1, i=4
      x(1) j=1, i=3




x(int i,int n, int a[]){

if(a[i]==0)
return false;

if(i==n-1)
return true;


for(int j=1;j<a[i];j++){
return x(i+j,n,a);
}

return x(i+1,n,a);

}




Input:  nums = [1,2,3]
Output: [
  [], 
  [1],
  [2],
  [3],
  [1,2],
  [1,3],
  [2,3],
  [1,2,3]
]



[123]

x(1)  1/[23]
	x(2) 12/[3]
		x(2) 123/[]

	x(2) 13/[]

x(1)  2/[3]
	x(1)  23/[]

x(1)  3/[]



1->2->3


x(List<Integer> l,int i,int a[]){

if(i>=a.length)
retrun;

for(int j=i;j<n;j++){
l.add(a[j])
x(l,j+1,a)
ans.add(new ArrayList(l)) ;
l.remove(a[j]);
}
return ans;
}


ans=[1,2,3]

i=0, j=0 x(j+1=1) [1]

	i=1, j=1 x(j+1=2) [1,2]

			i=2, j=2 x(j+1=3) [1,2,3]


	i=1, j=2 x(j+1=2) [1,2]




Which position 
Process
Team 
Growth path


leetcode (practise coupong)
time complexity, optimize, data structure, good clarifying question. 


For system design
Req gathering
scale
Defining functional and non functional requirements
Breaking the problem into small components and prioritising..

https://www.coupang.jobs/en/coupang-leadership-principles/
share your experince 





Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2

[0][1]
[1][2]
[2][0]


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.

[0][1,2]
[3][5]
[5][4]
[4][3]


//1. create a Map
//2. read key 0 from map, get values and read key 

Map<Integer,List<Integer>> g=new HashMap<>();

//init map
for(int i=0;i<n;i++){
List<Integer> l =new LinkedList<>();
g.put(a[i],l);
}




for(int i=0;i<a[i].length;i++){
 for(int i=0;i<a[i].length;i++){
	

 }
}



























